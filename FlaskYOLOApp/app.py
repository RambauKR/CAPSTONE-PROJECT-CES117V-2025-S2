from ultralytics import YOLO
model = YOLO('best.pt')  # load the YOLOv8 nano model pre-trained on COCO

from flask import Flask, Response, render_template, redirect, url_for

import cv2  # OpenCV for webcam access and image processing

app = Flask(__name__)

# Initialize webcam video capture (0 for default camera)
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    raise RuntimeError("Could not access webcam.")

# Global variables for snapshot/record functionality
last_frame = None        # to store the last frame for snapshot
recording = False        # flag to indicate if recording is on
video_writer = None      # VideoWriter object for recording
def generate_frames():
    global cap, last_frame, recording, video_writer
    while True:
        success, frame = cap.read()
        if not success:
            break

        # (Optional) You could still apply thresholding here if needed:
        # gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        # _, thresh = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY)
        # ... (We won't use 'thresh' for final output when YOLO is enabled)

        # **YOLOv8: Object Detection on the frame**
        results = model.predict(frame, conf=0.5)  # run YOLO inference with 50% confidence threshold
        # The results object may contain predictions for one or more images; we have one image (frame)
        # Draw bounding boxes and labels on the frame
        annotated_frame = results[0].plot()  # Ultralytics provides a .plot() method to draw results on image

        # Update last_frame for snapshot (already in BGR with annotations)
        last_frame = annotated_frame.copy()

        # Write to video if recording
        if recording and video_writer:
            video_writer.write(annotated_frame)

        # Encode and yield the annotated frame
        ret, buffer = cv2.imencode('.jpg', annotated_frame)
        if not ret:
            continue
        frame_bytes = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')
# Route to stream the video feed
@app.route('/video_feed')
def video_feed():
    # Return a multipart response generated by the frame generator
    return Response(generate_frames(), mimetype='multipart/x-mixed-replace; boundary=frame')

# Route for the homepage
@app.route('/')
def index():
    # Render an HTML template that shows the video stream and controls
    return render_template('index.html')
if __name__ == '__main__':
    app.run(debug=True)
